name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run full test suite
      id: tests
      run: |
        echo "Running comprehensive test suite..."
        npm test
        echo "test_status=success" >> $GITHUB_OUTPUT
      continue-on-error: false
      
    - name: Validate test results
      run: |
        if [ -f final_test_results.txt ]; then
          echo "Final test results found:"
          cat final_test_results.txt
          
          # Check for test failures
          if grep -q "FAILED\|ERROR\|0 passed" final_test_results.txt; then
            echo "‚ùå Tests failed - blocking PR merge"
            exit 1
          fi
          
          # Extract test count and verify all passed
          if grep -q "187.*passed" final_test_results.txt; then
            echo "‚úÖ All 187 tests passed - PR can proceed"
          else
            echo "‚ö†Ô∏è  Test count mismatch - expected 187 tests"
            exit 1
          fi
        else
          echo "‚ùå Test results file not found"
          exit 1
        fi
        
    - name: Comment test results on PR
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let testResults = '';
          
          try {
            if (fs.existsSync('final_test_results.txt')) {
              testResults = fs.readFileSync('final_test_results.txt', 'utf8');
            }
          } catch (error) {
            testResults = 'Could not read test results';
          }
          
          const success = '${{ steps.tests.outcome }}' === 'success';
          const emoji = success ? '‚úÖ' : '‚ùå';
          const status = success ? 'PASSED' : 'FAILED';
          
          const comment = `## ${emoji} Test Results - ${status}
          
          **Time Buddy Test Suite Results:**
          
          \`\`\`
          ${testResults}
          \`\`\`
          
          ${success ? 
            'üéâ All tests passed! This PR is ready for review and merge.' : 
            'üö´ Tests failed. Please fix the issues before merging this PR.'}
          
          ---
          *Automated test results from GitHub Actions*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: |
        echo "Running security audit..."
        npm audit --audit-level=high
      continue-on-error: false

  pr-requirements-check:
    name: PR Requirements
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check PR title and description
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          
          // Check PR title
          if (!pr.title || pr.title.length < 10) {
            core.setFailed('PR title must be at least 10 characters long and descriptive');
            return;
          }
          
          // Check PR description
          if (!pr.body || pr.body.trim().length < 20) {
            core.setFailed('PR description must be provided and at least 20 characters long');
            return;
          }
          
          console.log('‚úÖ PR title and description requirements met');
          
    - name: Validate branch naming
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        
        if [[ ! $BRANCH_NAME =~ ^(feature|fix|hotfix|refactor|docs|test|chore)/.+ ]]; then
          echo "‚ùå Branch name must follow pattern: type/description"
          echo "   Valid prefixes: feature, fix, hotfix, refactor, docs, test, chore"
          echo "   Current branch: $BRANCH_NAME"
          exit 1
        fi
        
        echo "‚úÖ Branch naming convention followed: $BRANCH_NAME"